# This function takes a message length (a binary string) and a chunk size as input.
# It divides the message length into chunks of the specified size and returns a list of these chunks.
def chunks(messageLength, chunkSize):
    chunkValues = []
    for i in range(0, len(messageLength), chunkSize):
        chunkValues.append(messageLength[i:i + chunkSize])

    return chunkValues

# This function performs a left rotation on a 32-bit chunk by the specified rotate length.
# The rotation is implemented using bitwise left shift and bitwise OR operations.
# The result is masked with 0xffffffff to ensure the result is a 32-bit value.
def leftRotate(chunk, rotateLength):
    return ((chunk << rotateLength) | (chunk >> (32 - rotateLength))) & 0xffffffff


def sha1Function(message):
    # These variables h0, h1, h2, h3, and h4 represent the initial hash values for the SHA-1 algorithm.
    h0 = 0x67452301
    h1 = 0xEFCDAB89
    h2 = 0x98BADCFE
    h3 = 0x10325476
    h4 = 0xC3D2E1F0

    messageLength = ""

    # This loop converts each character in the input message into its 8-bit binary representation
    # and concatenates them to form the messageLength string.
    for char in range(len(message)):
        messageLength += '{0:08b}'.format(ord(message[char]))

    # In the SHA-1 algorithm, the message length needs to be padded.
    # The message length is appended with a '1' bit followed by '0' bits
    # until the length of messageLength modulo 512 is 448.
    temp = messageLength
    messageLength += '1'

    while len(messageLength) % 512 != 448:
        messageLength += '0'

    # The original length of the message, in bits, is appended to messageLength as a 64-bit binary representation.
    messageLength += '{0:064b}'.format(len(temp))

    # The messageLength string is divided into chunks of size 512 bits. Each chunk is further divided into 32-bit words.
    # The words are converted from binary to integer representation and stored in the list w.
    chunk = chunks(messageLength, 512)

    for eachChunk in chunk:
        words = chunks(eachChunk, 32)
        w = [0] * 80
        for n in range(0, 16):
            w[n] = int(words[n], 2)

        # Additional words are generated by performing left rotations
        # and bitwise XOR operations on previous words, as specified by the SHA-1 algorithm.
        for i in range(16, 80):
            w[i] = leftRotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)

        # Temporary variables a, b, c, d, and e are initialized with the current hash values.
        a = h0
        b = h1
        c = h2
        d = h3
        e = h4

        # In this section, different functions and constants are assigned based on the current iteration index (i)
        # within the range of 0 to 79. These values are specified by the SHA-1 algorithm.
        for i in range(0, 80):
            if 0 <= i <= 19:
                f = (b & c) | ((~b) & d)
                k = 0x5A827999

            elif 20 <= i <= 39:
                f = b ^ c ^ d
                k = 0x6ED9EBA1

            elif 40 <= i <= 59:
                f = (b & c) | (b & d) | (c & d)
                k = 0x8F1BBCDC

            elif 60 <= i <= 79:
                f = b ^ c ^ d
                k = 0xCA62C1D6

            # The variables a, b, c, d, and e are updated according to the SHA-1 compression function.
            # The variables are reassigned with new values based on the previous values, the current word w[i],
            # the constant k, and the function f.
            # The results are masked with 0xffffffff to ensure they are 32-bit values.
            a, b, c, d, e = ((leftRotate(a, 5) + f + e + k + w[i]) & 0xffffffff, a, leftRotate(b, 30), c, d)

        # Finally, the updated hash values h0, h1, h2, h3, and h4 are computed by adding the previous values
        # with the respective variables a, b, c, d, and e.
        # The results are masked with 0xffffffff to ensure they remain 32-bit values.
        h0 = h0 + a & 0xffffffff
        h1 = h1 + b & 0xffffffff
        h2 = h2 + c & 0xffffffff
        h3 = h3 + d & 0xffffffff
        h4 = h4 + e & 0xffffffff

    # The final step is to concatenate the hash values h0, h1, h2, h3, and h4
    # into a single string and return the result as the SHA-1 hash value.
    return '%08x%08x%08x%08x%08x' % (h0, h1, h2, h3, h4)